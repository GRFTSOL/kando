//////////////////////////////////////////////////////////////////////////////////////////
//   _  _ ____ _  _ ___  ____                                                           //
//   |_/  |__| |\ | |  \ |  |    This file belongs to Kando, the cross-platform         //
//   | \_ |  | | \| |__/ |__|    pie menu. Read more on github.com/kando-menu/kando     //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: Simon Schneegans <code@simonschneegans.de>
// SPDX-License-Identifier: MIT

@use '../../variables.scss' as *;

$icon-padding: 1cqmin;
$center-size: 25cqmin;
$child-size: 12cqmin;
$child-offset: 30cqmin;
$grandchild-size: 4cqmin;
$grandchild-offset: 7cqmin;
$lock-size: 4cqmin;
$lock-offset: 18cqmin;
$backlink-size: 8cqmin;
$backlink-offset: 30cqmin;

.previewArea {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
  container-type: size;
  color: #eee;

  .preview {
    position: relative;
    width: 100cqmin;
    height: 100cqmin;

    .child,
    .center,
    .backLink,
    .lock {
      position: absolute;
      aspect-ratio: 1;
      border-radius: 50%;
      background-color: light-dark(rgba($base-dark, 0.3), rgba($base-light, 0.2));

      transition: transform 0.2s ease;
      border: 1px solid transparent;

      &:hover {
        background-color: light-dark(rgba($base-dark, 0.4), rgba($base-light, 0.3));
      }

      &.selected {
        border: $border-selected;
      }
    }

    .center {
      width: $center-size;
      top: calc(-1 * $center-size / 2 - $icon-padding / 2);
      left: calc(-1 * $center-size / 2 - $icon-padding / 2);
      padding: $icon-padding;

      transform: translate(calc(50cqmin), calc(50cqmin));

      &:active {
        top: calc(-1 * $center-size / 2 - $icon-padding / 2 + 1px);
      }

      :global(.icon-container) {
        clip-path: circle(50% at 50% 50%);
      }
    }

    .child {
      width: $child-size;
      top: calc(-1 * $child-size / 2 - $icon-padding / 2);
      left: calc(-1 * $child-size / 2 - $icon-padding / 2);
      padding: $icon-padding;

      transform: translate(
        calc(50cqmin + $child-offset * var(--dir-x)),
        calc(50cqmin + $child-offset * var(--dir-y))
      );

      // A low opacity seems to be required. Setting it to zero hides also the dragged copy
      // at the pointer.
      &.dragging {
        opacity: 0.001;
      }

      &.dropping {
        box-shadow: 0 0 10px light-dark($key-dark, $key-light);
        transform: translate(
            calc(50cqmin + $child-offset * var(--dir-x)),
            calc(50cqmin + $child-offset * var(--dir-y))
          )
          scale(1.1);
      }

      &:active {
        top: calc(-1 * $child-size / 2 - $icon-padding / 2 + 1px);
      }

      :global(.icon-container) {
        clip-path: circle(50% at 50% 50%);
      }
    }

    .lock {
      width: $lock-size;
      top: calc(-1 * $lock-size / 2 - $icon-padding / 4);
      left: calc(-1 * $lock-size / 2 - $icon-padding / 4);
      padding: $icon-padding / 2;

      transform: translate(
        calc(50cqmin + $lock-offset * var(--dir-x)),
        calc(50cqmin + $lock-offset * var(--dir-y))
      );

      background-color: transparent;
      color: $text-normal;
      opacity: 0.5;

      &.locked {
        opacity: 1;
        color: light-dark($key-dark, $key-light);
        background-color: light-dark(rgba($base-dark, 0.2), rgba($base-light, 0.15));

        &:hover {
          background-color: light-dark(rgba($base-dark, 0.3), rgba($base-light, 0.2));
        }
      }

      &:hover {
        opacity: 1;
        background-color: light-dark(rgba($base-dark, 0.1), rgba($base-light, 0.1));
      }

      &:active {
        top: calc(-1 * $lock-size / 2 - $icon-padding / 4 + 1px);
      }
    }

    .grandChild {
      position: absolute;
      aspect-ratio: 1;
      width: $grandchild-size;
      top: calc(50% + $grandchild-offset * var(--dir-y));
      left: calc(50% + $grandchild-offset * var(--dir-x));

      border-radius: 50%;

      transform: translate(-50%, -50%);

      background: linear-gradient(
        var(--angle),
        light-dark(rgba($base-dark, 0), rgba($base-light, 0)) 0%,
        light-dark(rgba($base-dark, 0), rgba($base-light, 0)) 40%,
        light-dark(rgba($base-dark, 0.2), rgba($base-light, 0.1)) 70%,
        light-dark(rgba($base-dark, 0.2), rgba($base-light, 0.1)) 100%
      );
    }

    .backLink {
      position: relative;
      width: $backlink-size;
      left: calc(-1 * $backlink-size / 2 - $icon-padding / 2);
      top: calc(-1 * $backlink-size / 2 - $icon-padding / 2);
      padding: $icon-padding;

      transform: translate(
          calc(50cqmin + $backlink-offset * var(--dir-x)),
          calc(50cqmin + $backlink-offset * var(--dir-y))
        )
        rotate(var(--angle));

      &:active {
        top: calc(-1 * $backlink-size / 2 - $icon-padding / 2 + 1px);
      }

      &.dropping {
        box-shadow: 0 0 10px light-dark($key-dark, $key-light);
        transform: translate(
            calc(50cqmin + $backlink-offset * var(--dir-x)),
            calc(50cqmin + $backlink-offset * var(--dir-y))
          )
          rotate(var(--angle)) scale(1.1);
      }

      // The ::before and ::after pseudo elements are used to draw the backlink line.
      &::before,
      &::after {
        content: '';
        position: absolute;
        height: 4cqmin;
        top: 3cqmin;
      }

      // The outer part.
      &::before {
        width: 12cqmin;
        right: -12cqmin;

        background: linear-gradient(
          to left,
          light-dark(rgba($base-dark, 0), rgba($base-light, 0)) 0%,
          light-dark(rgba($base-dark, 0.1), rgba($base-light, 0.1)) 25%,
          light-dark(rgba($base-dark, 0.1), rgba($base-light, 0.1)) 85%,
          light-dark(rgba($base-dark, 0), rgba($base-light, 0)) 100%
        );
      }

      // The inner part.
      &::after {
        width: 10cqmin;
        left: -10cqmin;

        background: linear-gradient(
          to left,
          light-dark(rgba($base-dark, 0), rgba($base-light, 0)) 0%,
          light-dark(rgba($base-dark, 0.1), rgba($base-light, 0.1)) 15%,
          light-dark(rgba($base-dark, 0.1), rgba($base-light, 0.1)) 75%,
          light-dark(rgba($base-dark, 0), rgba($base-light, 0)) 100%
        );
      }
    }
  }
}

.transitionContainer {
  transition:
    opacity 250ms ease,
    transform 350ms cubic-bezier(0.45, 1.45, 0.55, 1);
  position: absolute;
  width: 100%;
  height: 100%;

  &.fadeEnter {
    opacity: 0;
    transform: translate(
      calc($child-offset * var(--transition-dir-x)),
      calc($child-offset * var(--transition-dir-y))
    );
  }

  &.fadeExit {
    opacity: 1;
    transform: none;
  }

  &.fadeExitActive {
    opacity: 0;
    transform: translate(
      calc(-1 * $child-offset * var(--transition-dir-x)),
      calc(-1 * $child-offset * var(--transition-dir-y))
    );
    pointer-events: none;
  }

  &.fadeEnterActive {
    opacity: 1;
    transform: none;
    pointer-events: none;
  }
}
